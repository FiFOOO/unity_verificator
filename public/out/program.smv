MODULE main
  VAR
    tmp : signed word[32];
    x : signed word[32];
    y : signed word[32];
    p_initial : process initial(self);
    p_process_0 : process process_0(self);
    p_process_1 : process process_1(self);
  ASSIGN
    init(tmp) := swconst(0, 32);
    init(x) := swconst(0, 32);
    init(y) := swconst(0, 32);
    next(tmp) := tmp;
  TRANS
    !running

MODULE initial(sup)
  VAR
    pc : 1..3;
  ASSIGN
    init(pc) := 1;
    next(sup.x) := 
            case
               pc = 1 : swconst(60,32);
               TRUE   : sup.x;
            esac;
    next(sup.y) := 
            case
               pc = 2 : swconst(48,32);
               TRUE   : sup.y;
            esac;
  TRANS
      ( running & (
               pc = 1 & next(pc) = 2
             | pc = 2 & next(pc) = 3
             )
      | !running & next(pc) = pc )
    & ( pc = 3
       -> !running )


MODULE process_0(sup)
  VAR
    pc : 1..6;
  ASSIGN
    init(pc) := 1;
    next(sup.x) := 
            case
               pc = 3 : sup.x - sup.y;
               TRUE   : sup.x;
            esac;
  TRANS
      ( running & (
               pc = 1 & sup.x > sup.y & next(pc) = 2
             | pc = 1 & sup.x <= sup.y & next(pc) = 4
             | pc = 2 & next(pc) = 3
             | pc = 3 & next(pc) = 1
             | pc = 4 & next(pc) = 5
             | pc = 5 & TRUE & next(pc) = 1
             )
      | !running & next(pc) = pc )
    & ( pc = 2
      | pc = 4
       -> running )
    & ( pc = 5 & !TRUE
      | pc = 6
       -> !running )


MODULE process_1(sup)
  VAR
    pc : 1..6;
  ASSIGN
    init(pc) := 1;
    next(sup.y) := 
            case
               pc = 3 : sup.y - sup.x;
               TRUE   : sup.y;
            esac;
  TRANS
      ( running & (
               pc = 1 & sup.y > sup.x & next(pc) = 2
             | pc = 1 & sup.y <= sup.x & next(pc) = 4
             | pc = 2 & next(pc) = 3
             | pc = 3 & next(pc) = 1
             | pc = 4 & next(pc) = 5
             | pc = 5 & TRUE & next(pc) = 1
             )
      | !running & next(pc) = pc )
    & ( pc = 2
      | pc = 4
       -> running )
    & ( pc = 5 & !TRUE
      | pc = 6
       -> !running )


